number|math sop => sop_start
sop_start number|math => math {left: left.left, op: left.right.raw, right}

number|math op => op_start
op_start number|math => math {left: left.left, op: left.right.raw, right}

symbol dot => property_access
property_access symbol => symbol {left: left.left, right}

number|symbol comparison => cmpexpr_start
cmpexpr_end comparison => cmpexpr_start
cmpexpr_start number|symbol|cmpexpr_end => cmpexpr_end

map symbol => function_call {left: right, isMap: true}
pipe symbol => function_call {left: right}
function_call|function_call_with_args symbol|number => function_call_with_args
function_call|function_call_with_args ! => call_end {left: left}

lbra number|symbol|math => list_start
list_start number|symbol|math => list_start
list_start rbra => list_end

math|number|symbol|list_end call_end => flow
flow call_end => flow

if symbol|cmpexpr_end => if_start {left: right}
if_start colon => if_end
if_end block_end => if_statement

elif symbol|cmpexpr_end => elif_start {left: right}
elif_start colon => elif_end
elif_end block_end => elif_statement

else colon => else_end
else_end block_end => else_statement

if_statement elif_statement => if_elif_statement
if_elif_statement elif_statement => if_elif_statement
if_elif_statement else_statement => if_elif_else_statement
if_statement else_statement => if_else_statement

indent flow|symbol => block_start
block_start flow|symbol => block_start
block_start dedent => block_end

fn symbol => function_start
function_start symbol => function_start
function_start colon => function_def
function_def block_end => function_end

flow|function_end|if_else_statement|if_elif_statement eof => clio {program: left}
if_elif_else_statement|if_statement eof => clio {program: left}
flow|function_end|if_else_statement|if_elif_statement clio => clio {program: [left, right.program]}
if_elif_else_statement|if_statement clio => clio {program: [left, right.program]}